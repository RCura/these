\subsection{Quand paramètre-t-on un modèle ?} 
 
Le paramétrage du modèle n'est pas une étape unique, qui se déroulerait une fois le modèle construit, d'une manière complètement automatisable, permettant l'aboutissement d'un modèle désormais finalisé. 
Au lieu de cela, le paramétrage se fait par étapes successives, chaque modification des hypothèses, des mécanismes, des objectifs ou encore des paramètres amenant à une nouvelle phase de paramétrage. 
Afin que les \ref{}comportements du modèle soient cohérents avec les attendus, il convient donc de paramétrer le modèle aussi souvent que possible, à chaque modification de chacune de ses parties. 
Un premier paramétrage, souvent non mentionné, tient ainsi lieu lors de la construction en elle-même du modèle, et vise en particulier à doter les paramètres techniques \change{ref vers chap2 et encadré types de paramètres} de valeurs permettant aux autres paramètres de donner satisfaction avec des ordres de grandeur cohérents. 
 
\subsubsection{Tout au long de la construction} 
 
Comme le montre la \cref{fig:comits-periodes}, les étapes de paramétrage sont omniprésentes sur la durée de construction du modèle. On peut en effet y noter que les \textit{comits} du code portant sur des modifications de valeurs de paramètres sont très réguliers. 
Au delà de la valeur illustrative de ce modèle particulier, c'est un comportement que l'on retrouve régulièrement sur les modèles dont l'évolution est documentée, ce que le recours de plus en plus fréquent à des outils de versionnement (git en particulier) encourage. 
 
La régularité et le systématisme du paramétrage sont bénéfiques à la création d'un modèle en ce qu'ils impliquent une utilisation fréquente du modèle, et une utilisation plus poussée : le paramétrage implique de tester plusieurs valeurs, et donc d'executer le modèle de nombreuses fois, d'autant plus en prenant en compte les réplications nécessaires à la prise en compte de l'aléa d'un modèle. 
 
Une analogie peut être faite avec un principe populaire dans le développement de logiciel libre, résumé par le mot d'ordre \og \textit{release early, release often}\fg{}\footnote{Mot d'ordre en particulier popularisé par Eric Raymond, l'un des \og évangélistes\fg{} du logiciel \textit{open-source}.}. 
Selon ce principe, une publication régulière et rapide du code source d'un logiciel permet d'avoir un retour rapide de la communauté des utilisateurs, et ainsi de faire remonter d'éventuels \textit{bugs} et régressions bien plus rapidement que dans une voie plus classique. 
 
Un modèle, dès qu'il devient suffisament complexe pour que les modifications n'apportent pas que des changements prévisibles, est souvent sujet à des \og effets de bord \fg{}, c'est-à-dire des comportements irrationnels spécifiques qui n'arrivent que dans certaines conditions particulières. 
Comme dans n'importe quel logiciel informatique, les \textit{bugs} les plus compliqués à résoudre sont ceux dont on ne comprend pourquoi ou quand ils se déclenchent. 
Les modèles réagissent de la même manière, provoquant de temps en temps des erreurs ou des comportements aberrants sans que l'on soit en mesure de les reproduire facilement. Un paramétrage régulier entraîne une plus forte probabilité de survenance de ces cas particuliers, et dès lors, une meilleure résistance des mécanismes. 
 
\subsubsection{À chaque ajout ou changement de mécanisme} 
 
De manière plus spécifique, et pour les mêmes raisons qu'évoquées auparavant, il est indispensable de réaliser un paramétrage à chaque fois que les mécanismes de mobilisation d'un paramètre changent. 
 
Le paramétrage permet de s'assurer de la cohérence des mécanismes et paramètres les uns avec les autres. 
Que le modèle soit construit par une seule personne ou par plusieurs, il est plus simple de corriger une erreur ou un comportement inattendu quand les modifications depuis le dernier état stable sont faibles plutôt que quand de nombreux changements ont été effectués. 
En effet, la résolution d'erreurs nouvelles dans un modèle se résume souvent à activer et désactiver les ajouts, un par un, afin de trouver la modification responsable. 
Dans un modèle complexe où les mécanismes et paramètres sont en partie interdépendants, quand plusieurs modifications sont effectuées, les petites erreurs et incompatibilités de chacune se combinent en des problèmes tout aussi complexes que les systèmes modélisés. 
On gagne donc énormément de temps de correction du modèle en identifiant régulièrement les problèmes, ce qu'un paramétrage à chaque changement permet. 
 
Le recours régulier à un paramétrage remplit ainsi exactement le même rôle que les \og bancs de test\fg{} de l'industrie, c'est-à-dire qu'il permet d'évaluer (cf. \cref{enc:termes-calibration}) un modèle à chacune des modifications, s'assurant donc de sa qualité tout au long et minimisant le risque d'erreurs et donc la durée des phases de paramétrages plus importants. 
 
\subsubsection{Avant toute modification majeure du modèle} 
 
Si le paramétrage a été régulier dans la construction du modèle, on note toutefois, dans la figure \ref{fig:comits-periodes}, que certaines phases (période B en particulier, mais aussi D) se caractérisent par une forte tâche de paramétrage avant une période de changement (C et E respectivement). 
Cela correspond à une phase d'exploration plus poussée du modèle, en vue de le faire évoluer par la suite, par exemple en complexifiant les mécanismes à l'oeuvre pour le rendre plus conforme aux attentes. 
 
Quand le paramétrage n'est pas bien exécuté avant ces changements, les mécanismes à adapter sont moins clairs et moins bien compris, et un travail plus important d'essai-erreur est requis, comme les premiers temps de la construction du modèle (période A) l'illustrent : faute de bonne compréhension du modèle, l'évolution est plus poussive, dans un aller-retour constant entre paramétrage et ajout/modification de mécanismes. 
 
Ce principe s'inscrit dans les méthodes de développement qualifiées d'\og agiles\fg{}, qui insistent en particulier sur l'\changec{incrémentalité}{Je reprendrais ça en chap. 7, dans un encadré différenciant bien itératif/incrémental\\cf. \href{https://ravisr16.wordpress.com/2014/06/22/agile-development-environment/}{Agile Development Environment @ ravisr16}} de la construction : à chaque étape, aussi peu différente soit-elle de la précédente, le logiciel (ou le modèle ici) doit être fonctionnel, et on ne passe pas à une version suivante tant que ce n'est pas le cas. 
