citation(package = "cartography")
citation(package = "mapedit")
shiny::runApp('test_resizable')
library(shiny)
library(shinyjqui)
runApp('test_resizable')
shiny::runApp('Dropbox/parcoords_events')
iris
?iris
range(iris$Sepal.Length)
runApp('Dropbox/parcoords_events')
c(min(iris$Sepal.Width), max(iris$Sepal.Width))
c(min(iris$Sepal.Length), max(iris$Sepal.Length))
c(min(iris$Petal.Width), max(iris$Petal.Width))
c(min(iris$Petal.Length), max(iris$Petal.Length))
runApp('Dropbox/parcoords_events')
runApp('Dropbox/parcoords_events')
unique(iris$Species)
runApp('Dropbox/parcoords_events')
runApp('Dropbox/parcoords_events')
library(reprex)
reprex::reprex()
library(reprex)
reprex::reprex()
library(reprex)
reprex()
suppressPackageStartupMessages(library(plotly))
library(plotly)
suppressPackageStartupMessages(library(plotly))
library(reprex)
reprex()
webshot::install_phantomjs()
library(reprex)
reprex()
library(htmlwidgets)
library(shiny)
runApp('Dropbox/plotly_parcoords_events/demo_restyle.R')
runApp('Dropbox/plotly_parcoords_events/demo_restyle.R')
runApp('Dropbox/plotly_parcoords_events/demo_restyle.R')
reprex()
library(purrr)
runApp('Dropbox/plotly_parcoords_events/demo_restyle.R')
runApp('Dropbox/plotly_parcoords_events/demo_restyle.R')
runApp('Dropbox/plotly_parcoords_events/demo_restyle.R')
library(reprex)
reprex()
library(sf)
??nc
sf::nc
nc <- st_read(system.file("shape/nc.shp", package="sf"))
plot(nc)
plot(nc$fips)
plot(nc["fips"])
plot(nc[,"fips"])
plot(nc[,"FIPS"])
st_cast(nc, to = "MULTIPOINT") %>% plot()
st_cast(nc, to = "MULTIPOINT") %>% plot(.[,"FIPS"])
st_cast(nc, to = "MULTIPOINT") %>% plot(.["FIPS"])
plot(foo["FIPS"])
foo <- st_cast(nc, to = "MULTIPOINT")
plot(foo["FIPS"])
foo <- st_cast(nc, to = "POINT")
plot(foo["FIPS"])
foo <- st_cast(nc, to = "POINT")
foo <- st_cast(nc, to = "POINT", do_split = TRUE)
plot(foo["FIPS"])
foo <- st_cast(nc, to = "LINE", do_split = TRUE)
foo <- st_cast(nc, to = "POLYLINE")
?st_cast
foo <- st_cast(nc, to = "LINESTRING")
plot(foo["FIPS"])
foo <- st_cast(nc, to = "MULTILINESTRING")
plot(foo["FIPS"])
library(DiagrammeR)
DiagrammeR::grViz(diagram = "~/Dropbox/1_These/Modélisation/schemas_simedb/robin_simedb_/diagrams/agregats_4_5.1degree.dot")
DiagrammeR::grViz(diagram = "~/Dropbox/1_These/Modélisation/schemas_simedb/robin_simedb_/diagrams/agregats_4_5.1degree.dot")
DiagrammeR::grViz(diagram = "~/Dropbox/1_These/Modélisation/schemas_simedb/robin_simedb_/diagrams/agregats_4_5.1degree.dot")
blob <- DiagrammeR::grViz(diagram = "~/Dropbox/1_These/Modélisation/schemas_simedb/robin_simedb_/diagrams/agregats_4_5.1degree.dot")
blob <- DiagrammeR::grViz(diagram = "~/Dropbox/1_These/Modélisation/schemas_simedb/robin_simedb_/diagrams/agregats_4_5.1degree.dot"
layout = neato)
blob <- DiagrammeR::grViz(diagram = "~/Dropbox/1_These/Modélisation/schemas_simedb/robin_simedb_/diagrams/agregats_4_5.1degree.dot"
layout = "neato")
blob <- DiagrammeR::grViz(diagram = "~/Dropbox/1_These/Modélisation/schemas_simedb/robin_simedb_/diagrams/agregats_4_5.1degree.dot")
blob %>% DiagrammeR::layout_nodes_w_string()
blob %>% DiagrammeR::layout_nodes_w_string(graph = blob)
DiagrammeR::layout_nodes_w_string(graph = blob)
blob <- DiagrammeR::grViz(diagram = "~/Dropbox/1_These/Modélisation/schemas_simedb/robin_simedb_/diagrams/agregats_4_5.1degree.dot")
blob
library(tidyverse)
library(DBI)
library(dbplyr)
library("RPostgreSQL") # Package apportant les drivers pour PostgreSQL
install.packages("RPostgreSQL")
library("RPostgreSQL") # Package apportant les drivers pour PostgreSQL
driver <- dbDriver("PostgreSQL")
con <- DBI::dbConnect(drv = driver,
host = "193.55.107.5",
port = "5432",
user = "robin",
password = "parisgeo2012")
shiny::runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
library(ggplot2)
ggplot(mpg) + geom_histogram(aes(hwy), bins = 10)
ggplot(mpg) + geom_histogram(aes(hwy), bins = 20)
shiny::runApp('Dropbox/module_output')
# regarder https://github.com/czeildi/shiny-modules-examples
# working ici : https://ildi-czeller.shinyapps.io/shiny-modules-examples/
customPlotOutput <- function(id) {
ns <- NS(id)
tagList(plotOutput(ns("plot1")))
}
customPlot <- function(input, output, session, data, nbBreaks) {
myData <- reactive({
data()
})
output$plot1 <- renderPlot({
scatterPlot(myData(), nbBreaks = nbBreaks())
})
return(myData)
}
scatterPlot <- function(data, nbBreaks) {
ggplot(data, aes(hwy)) +
geom_histogram(bins = nbBreaks)
}
library(shiny)
library(ggplot2)
ui <- fixedPage(
h2("Module example"),
sliderInput(inputId = "myslider", label = "slider",
min = 1, max = 30, step = 1, value = 10)
customPlotOutput("scatters")
)
server <- function(input, output, session) {
nbBreaks <- reactive(
input$myslider
)
callModule(customPlot, "scatters", reactive(mpg),
nbBreaks = nbBreaks()
)
}
shinyApp(ui, server)
customPlotOutput <- function(id) {
ns <- NS(id)
tagList(plotOutput(ns("plot1")))
}
customPlot <- function(input, output, session, data, nbBreaks) {
myData <- reactive({
data()
})
output$plot1 <- renderPlot({
scatterPlot(myData(), nbBreaks = nbBreaks())
})
return(myData)
}
scatterPlot <- function(data, nbBreaks) {
ggplot(data, aes(hwy)) +
geom_histogram(bins = nbBreaks)
}
library(shiny)
library(ggplot2)
ui <- fixedPage(
h2("Module example"),
sliderInput(inputId = "myslider", label = "slider",
min = 1, max = 30, step = 1, value = 10)
customPlotOutput("scatters")
)
ui <- fixedPage(
h2("Module example"),
sliderInput(inputId = "myslider", label = "slider",
min = 1, max = 30, step = 1, value = 10),
customPlotOutput("scatters")
)
server <- function(input, output, session) {
nbBreaks <- reactive(
input$myslider
)
callModule(customPlot, "scatters", reactive(mpg),
nbBreaks = nbBreaks()
)
}
shinyApp(ui, server)
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
customPlotOutput <- function(id) {
ns <- NS(id)
tagList(plotOutput(ns("plot1")))
}
customPlotOutput()
customPlotOutput(1)
customPlotOutput("1")
customPlotOutput("ABC")
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
scatterPlot <- function(data, myvar, nbBreaks) {
ggplot(data, aes_string(x = myvar())) +
geom_histogram(bins = nbBreaks)
}
scatterPlot <- function(data, myvar, nbBreaks) {
ggplot(data, aes_string(x = myvar())) +
geom_histogram(bins = nbBreaks)
}
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
mpg
library(dplyr)
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
runApp('Dropbox/module_output')
plotMtcars <- function(sample_ratio) {
mtcars %>%
.[sample(nrow(.), floor(nrow(.) * sample_ratio)), ] %>%
ggplot(aes(x = cyl, y = mpg)) +
geom_point()
}
plotMtcars()
plotMtcars(.5)
plotMtcars
library(tidyverse)
setwd("~/Dropbox/1_These/0_Manuscrit/chap5/src/load_time_abandonment")
abandonment_data <- read_csv("data_section.io.csv")
View(abandonment_data)
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_line()
abandonment_data <- read_csv2("data_section.io.csv")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_line()
abandonment_data <- read_csv2("data_section.io.csv")
abandonment_data <- read_csv("data_section.io.csv")
data_section.io <- read.csv("~/Dropbox/1_These/0_Manuscrit/chap5/src/load_time_abandonment/data_section.io.csv", dec=",")
View(data_section.io)
abandonment_data <- read.csv("data_section.io.csv",
dec=",", stringsAsFactors = FALSE)
abandonment_data <- read.csv("data_section.io.csv", dec=",", stringsAsFactors = FALSE)
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_line()
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_line() +
coord_flip()
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_line()
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line()
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
labs(title = "Nombre de pages visitées par site\n selon leur durée d'affichage")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "",
caption = "Sources : section.io (www.section.io/blog/page-load-time-bounce-rate/)")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : section.io (www.section.io/blog/page-load-time-bounce-rate/)")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
ggsave(last_plot(), filename = "abandon_pages.pdf", width = 20, height = 10, units = "cm")
library(tidyverse)
abandonment_data <- read.csv("data_section.io.csv", dec=",", stringsAsFactors = FALSE)
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : D'après section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
ggsave(last_plot(), filename = "abandon_pages.pdf", width = 20, height = 10, units = "cm")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
scale_y_continuous(limits = c(1,10)) +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : D'après section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
scale_y_continuous(limits = c(0,10)) +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : D'après section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
scale_y_continuous(limits = c(1,10)) +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : D'après section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
scale_y_continuous(limits = c(1,9)) +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : D'après section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
scale_y_continuous(limits = c(1,9), breaks = c(1,3,5,7)) +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : D'après section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
scale_y_continuous(limits = c(1,9), breaks = c(1,3,5,7,9)) +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : D'après section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
scale_y_continuous(limits = c(1,9), breaks = c(1,3,5,7,9),
minor_breaks = c(2,4,6,8)) +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : D'après section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
scale_y_continuous(limits = c(1,10), breaks = c(1,3,5,7,9),
minor_breaks = c(2,4,6,8)) +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : D'après section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
scale_y_continuous(limits = c(1,10), breaks = c(2,4,6,8,10),
minor_breaks = c(2,4,6,8)) +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : D'après section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
scale_y_continuous(limits = c(1,10), breaks = c(2,4,6,8,10),
minor_breaks = c(1,3,5,7,9)) +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : D'après section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
library(tidyverse)
abandonment_data <- read.csv("data_section.io.csv", dec=",", stringsAsFactors = FALSE)
ggplot(abandonment_data) +
aes(x = Load_Time, y = Number_pages_viewed) +
geom_point() +
geom_line() +
scale_y_continuous(limits = c(1,10), breaks = c(2,4,6,8,10),
minor_breaks = c(1,3,5,7,9)) +
labs(title = "Nombre de pages visitées par site selon leur durée d'affichage",
subtitle = "Plus le temps de chargement est long, moins le visiteur consultera de pages",
caption = "Sources : D'après section.io (www.section.io/blog/page-load-time-bounce-rate/)",
x = "Temps de chargement d'une page [secondes]",
y = "Nombre de pages vues")
ggsave(last_plot(), filename = "abandon_pages.pdf", width = 20, height = 10, units = "cm")
