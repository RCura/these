
@incollection{tannier_ontologie_2014-2,
  title = {Une Ontologie Pour Décrire Les Transformations Du Système de Peuplement Européen Entre 800 et 1100},
  url = {https://hal.archives-ouvertes.fr/hal-01021976},
  booktitle = {Ontologies et Modélisation Par {{SMA}} En {{SHS}}},
  publisher = {{Hermès - Lavoisier}},
  urldate = {2014-12-31},
  date = {2014},
  pages = {289--310},
  keywords = {peuplement européen,transformations},
  author = {Tannier, Cécile and Zadora-Rio, Elisabeth and Leturcq, Samuel and Rodier, Xavier and Lorans, Elisabeth},
  editor = {Phan, Denis},
  file = {/home/robin/.mozilla/firefox/2czgwusc.default/zotero/storage/B65WRF59/hal-01021976.html}
}

@thesis{schmitt_modelisation_2014-1,
  langid = {french},
  location = {{paris}},
  title = {Modélisation de la dynamique des systèmes de peuplement : de SimpopLocal à SimpopNet.},
  url = {https://tel.archives-ouvertes.fr/tel-01077891/document},
  shorttitle = {Modélisation de la dynamique des systèmes de peuplement},
  abstract = {L'évolution des villes est-elle le résultat de leurs multiples interactions ? C'est sur ce postulat que s'appuie la théorie évolutive urbaine (Pumain, 2000) pour analyser les processus de croissance des villes. Cette thèse, réalisée dans un contexte inter-disciplinaire, vise à évaluer la validité d'une telle hypothèse par la simulation informatique. Pour mener à bien ce projet, les savoirs accumulés sur la dynamique des systèmes de villes sont d'abord rassemblés afin d'en extraire les grandes caractéristiques, synthétisées sous la forme de dix fait stylisés majeurs. Deux modèles de simulation, SimpopLocal et SimpopNet, sont ensuite construits, documentés de manière standardisée, et explorés de manière systématique. Ces modèles interrogent chacun un aspect précis de la théorie évolutive urbaine: la nature des interactions interurbaines pour le premier et leur support pour le second. Les besoins associés à leur nécessaire évaluation ont guidé la conception et la mise en œuvre de deux protocoles d'explorations systématiques inédits: une méthode de calibrage automatisée, et un protocole d'analyse de sensibilité qui évalue individuellement la contribution de chaque mécanisme aux comportements simulés. Ces deux formes d'exploration confrontent de façon systématique les résultats de simulation avec les connaissances actuelles. Elles montrent que ces modèles sont capables de rendre compte de processus clés de la dynamique des systèmes des villes et prouvent pour la première fois la nécessité de mécanismes d'interactions interurbaines pour simuler des croissances proches des évolutions de systèmes réels.},
  institution = {{Université Paris I - Panthéon-Sorbonne}},
  type = {Thèse de Doctorat},
  date = {2014},
  author = {Schmitt, Clara},
  file = {/home/robin/Dropbox/Biblio/Schmitt_2014_Modélisation_de_la_dynamique_des_systèmes_de_peuplement.pdf;/home/robin/.mozilla/firefox/2czgwusc.default/zotero/storage/6QJQPIX9/tel-01077891.html}
}

@book{gilbert_simulation_2005,
  title = {Simulation for the Social Scientist},
  publisher = {{McGraw-Hill Education (UK)}},
  date = {2005},
  author = {Gilbert, Nigel and Troitzsch, Klaus}
}

@article{pumain_les_2001,
  title = {Les Interactions Spatiales},
  journaltitle = {Armand Colin, Paris},
  date = {2001},
  pages = {19--31},
  author = {Pumain, Denise and Saint-Julien, Thérèse}
}

@article{stewart_demographic_1948,
  title = {Demographic Gravitation: Evidence and Applications},
  volume = {11},
  issue = {1/2},
  journaltitle = {Sociometry},
  date = {1948},
  pages = {31--58},
  author = {Stewart, John Q}
}

@article{schelling_dynamic_1971,
  title = {Dynamic Models of Segregation},
  volume = {1},
  number = {2},
  journaltitle = {Journal of mathematical sociology},
  date = {1971},
  pages = {143--186},
  author = {Schelling, Thomas C}
}

@book{robert_nouveau_1993,
  title = {Le Nouveau Petit {{Robert}}},
  publisher = {{le Robert}},
  date = {1993},
  author = {Robert, Paul and Rey-Debove, Josette and Rey, Alain}
}

@article{mathian_formalisation_2015,
  langid = {french},
  title = {Formalisation des interactions spatiales dans les modèles multi-agents - Essai d’analyse comparative},
  volume = {25},
  issn = {1260-5875, 2116-7060},
  url = {http://dx.doi.org/10.3166/RIG.25.393-414},
  doi = {10.3166/RIG.25.393-414},
  abstract = {Dernières avancées dans le domaine de la géomatique : représentation, modélisation, intégration, analyse et la visualisation de données géographiques},
  number = {3},
  journaltitle = {Revue Internationale de Géomatique},
  shortjournal = {Rev. Int. Geomat.},
  urldate = {2017-05-23},
  date = {2015},
  pages = {393--414},
  author = {Mathian, Hélène and Tannier, Cécile},
  file = {/home/robin/.mozilla/firefox/2czgwusc.default/zotero/storage/NIA4HEFP/lvrig253p393.html}
}

@article{treuil_modelisation_2008,
  title = {Modélisation et Simulation à Base d’agents},
  journaltitle = {Dunod Editions},
  date = {2008},
  pages = {1--13},
  author = {Treuil, Jean-Pierre and Drogoul, Alexis and Zucker, Jean-Daniel}
}

@article{minsky_matter_1965,
  title = {Matter, Mind and Models},
  date = {1965},
  author = {Minsky, Marvin}
}

@book{latour_nous_2013,
  title = {Nous n'avons Jamais Été Modernes},
  publisher = {{La découverte}},
  date = {2013},
  author = {Latour, Bruno}
}

@incollection{daude_comparaison_2006,
  title = {Comparaison de Trois Implémentations Du Modèle de {{Schelling}}},
  url = {https://halshs.archives-ouvertes.fr/halshs-01082655},
  booktitle = {Modélisation et Simulation Multi-Agents. {{Applications}} Pour Les {{Sciences}} de l'{{Homme}} et de La {{Société}}},
  date = {2006},
  pages = {411--441},
  keywords = {Ségrégation spatiale},
  author = {Daudé, Eric and Langlois, Patrice},
  editor = {{Hermès}}
}

@incollection{durand1995modeles,
  title = {Les Modèles En Géographie},
  edition = {2ème édition},
  isbn = {978-2-7178-2899-3},
  number = {Chapitre 16},
  booktitle = {Bailly {{A}}., {{Ferras R}}., {{Pumain D}}., {{Encyclopédie}} de La Géographie},
  date = {1995},
  pages = {293--307},
  author = {Durand-Dastès, François}
}

@article{verhulst1838notice,
  title = {Notice Sur La Loi Que La Population Suit Dans Son Accroissement. Correspondance Mathématique et Physique Publiée Par A},
  volume = {10},
  journaltitle = {Quetelet},
  date = {1838},
  pages = {113--121},
  author = {Verhulst, Pierre-François}
}

@book{tresor1992,
  title = {Trésor de La Langue Française},
  publisher = {{Éditions du Centre national de la recherche scientifique}},
  date = {1992},
  author = {Imbs, Paul and Quemada, Bernard}
}

@online{nykamp_parameter_2015,
  langid = {english},
  title = {Parameter Definition.},
  url = {http://mathinsight.org/definition/parameter},
  abstract = {Parameter definition
 
A parameter is a quantity that influences the output or behavior of a mathematical object but is viewed as being held constant. Parameters are closely related to variables, and the difference is sometimes just a matter of perspective. Variables are viewed as changing while parameters typically either don't change or change more slowly. In some contexts, one can imagine performing multiple experiments, where the variables are changing through each experiment, but the parameters are held fixed during each experiment and only change between experiments.

One place parameters appear is within functions. For example, a function might a generic quadratic function as
f(x)=ax2+bx+c.

Here, the variable x is regarded as the input to the function. The symbols a, b, and c are parameters that determine the behavior of the function f. For each value of the parameters, we get a different function. The influence of parameters on a function is captureed by the metaphor of dials on a function machine.},
  journaltitle = {Math Insight},
  type = {Definition},
  urldate = {2017-12-18},
  date = {2015},
  author = {Nykamp, Duane Q.}
}

@article{imagemagick2008imagemagick,
  title = {{{ImageMagick}}},
  date = {2008},
  author = {ImageMagick Studio, LLC}
}

@online{nykamp_function_2015,
  langid = {english},
  title = {Function Machine Parameters.},
  url = {http://mathinsight.org/function_machine_parameters},
  abstract = {Function machine parameters
Suggested background

    The function machine

The function machine is a handy metaphor that illustrates how functions work. A function f
takes an input, say represented by the variable x, and spits out the value f(x)

.
Function machine

The function machine metaphor can also aid one in understanding how a function can depend on parameters. Parmameters are additional quantities that influence the behavior of the function. However, unlike the input variables, parameters are typically viewed as being held constant, or possibly changing slowly.

The influence of parameters on a function is the like influence of dials on a machine. For a given setting of the dials, the machine processes the inputs in a certain way. If one leaves the dials fixed, then the function machine always spits out the same output value for a given fixed input value.

If one wishes to change how the machine is operating, one can adjust one of the dials, i.e., change one of the parameters. When the dials are changed, the machine still process the inputs and turns them into outputs. However, with new parameters, for the same fixed input value, the function machine may now spit out a different output value than it did before the parameters were changed.
Function machine parameters

For example, we could define a quadratic function f
with three parameters a, b, and c as
f(x)=ax2+bx+c.
For a given set of parameters, such as a=b=c=1, the function f behaves like a normal function. Since with these parameters, f(x)=x2+x+1, whenever we put x=2 in the function machine, it always produces f(2)=22+2+1=7

.

When we change the parameters, we turn f
into a different function. For example, if we change a into a=2, now f operates using the formula f(x)=2x2+x+1, and f(2)=2⋅22+2+1=11

. In this sense, a function with parameters represents a whole family of functions, one for each value of the parameters.

If we don't know specific values for the parameter, we can still use the function machine to operate on input values. If we leave the parameters a
, b, and c as their symbols, then f(2)=4a+2b+c. Then, once we know numerical values for the parameters, we can immediately determine a numeric value for f(2)

.
Parameters, input variables: what's the difference?

For the function f(x)=ax2+bx+c
, could we learn something by leaving the expression in terms of the symbols a, b, and c and seeing how f(x) depends on the parameters? Maybe we could fix x=2 and look how f(2) changes as we let a

vary.

If we do such manipulations and look at how the output of a function depends on varying a parameter, then we are treating the function as though the parameter were a input variable. But that's OK, as the difference between variables and parameters is really just a matter of perspective.

The output of the function machine will depend both on the setting of the dial and the object we put in the input funnel. The behavior of the function machine would not change if we replaced one of the dials with another input funnel and specified the former dial's setting by putting an object representing that setting into the new input funnel. In this sense, inputs and parameters are equivalent.

The distinction between inputs and parameters is merely a matter of convenience. If we know that a setting is going to stay fixed for awhile, it is more convenient to represent it with a dial that doesn't change its value until we manually change it. Then, it is natural to explore the behavior of the function machine with many inputs before changing a parameter value.},
  journaltitle = {Math Insight},
  type = {Definition},
  urldate = {2017-12-18},
  date = {2015},
  author = {Nykamp, Duane Q.}
}

@inreference{_parameter_2017,
  langid = {english},
  title = {Parameter (Computer Programming)},
  url = {https://en.wikipedia.org/w/index.php?title=Parameter_(computer_programming)&oldid=815191973},
  abstract = {In computer programming, a parameter is a special kind of variable, used in a subroutine to refer to one of the pieces of data provided as input to the subroutine. These pieces of data are called arguments. An ordered list of parameters is usually included in the definition of a subroutine, so that, each time the subroutine is called, its arguments for that call can be assigned to the corresponding parameters.
Just as in standard mathematical usage, the argument is thus the actual input passed to a function, procedure, or routine, whereas the parameter is the variable inside the implementation of the subroutine. For example, if one defines the add subroutine as def add(x, y): return x + y, then x, y are parameters, while if this is called as add(2, 3), then 2, 3 are the arguments. Note that variables from the calling context can be arguments: if the subroutine is called as a = 2; b = 3; add(a, b) then the variables a, b are the arguments, not only the values 2, 3. See the Parameters and arguments section for more information.
In the most common case, call by value, a parameter acts within the subroutine as a variable initialized to the value of the argument (a local (isolated) copy of the argument if the argument is a variable), but in other cases, e.g. call by reference, the argument supplied by the caller can be affected by actions within the called subroutine (as discussed in evaluation strategy). In call by value, one can thus think of arguments as values (properly, think of the value of arguments as the "arguments" themselves), but in general arguments are not simply values.
The semantics for how parameters can be declared and how the arguments are passed to the parameters of subroutines are defined by the language, but the details of how this is represented in any particular computer system depend on the calling conventions of that system.},
  booktitle = {Wikipedia},
  urldate = {2017-12-18},
  date = {2017-12-13T09:15:53Z},
  file = {/home/robin/.mozilla/firefox/2czgwusc.default/zotero/storage/88CB3IDI/index.html},
  note = {Page Version ID: 815191973}
}

@book{sas1990sas,
  title = {{{SAS}}/{{STAT}} User's Guide: Version 6},
  volume = {2},
  publisher = {{Sas Inst}},
  date = {1990},
  author = {Institute, SAS}
}

@article{vogt1993dictionary,
  title = {Dictionary of Statistics and Methodology: {{A}} Nontechnical Guide for the Social Sciences.},
  date = {1993},
  author = {Vogt, W Paul}
}

@online{pumain_modegravitaire_2004,
  title = {Modèle Gravitaire - {{Hypergéo}}},
  url = {http://www.hypergeo.eu/spip.php?article76},
  journaltitle = {Hypergéo},
  type = {Encyclopédie électronique},
  urldate = {2018-01-11},
  date = {2004-05-24},
  author = {Pumain, Denise},
  file = {/home/robin/.mozilla/firefox/2czgwusc.default/zotero/storage/GXH6RIM2/spip.html}
}

@thesis{de2008imperfection,
  title = {Imperfection, Temps et Espace: Modélisation, Analyse et Visualisation Dans Un {{SIG}} Archéologique},
  institution = {{Université de Reims-Champagne Ardenne}},
  date = {2008},
  author = {De Runz, Cyril}
}

@article{livet2014diversite,
  title = {Diversité et Complémentarité Des Modèles Multi-Agents En Sciences Sociales},
  volume = {55},
  number = {4},
  journaltitle = {Revue française de sociologie},
  date = {2014},
  pages = {689--729},
  author = {Livet, Pierre and Phan, Denis and Sanders, Lena}
}

@article{yule1925ii,
  title = {{{II}}.—{{A}} Mathematical Theory of Evolution, Based on the Conclusions of {{Dr}}. {{JC Willis}}, {{FR S}}},
  volume = {213},
  issue = {402-410},
  journaltitle = {Phil. Trans. R. Soc. Lond. B},
  date = {1925},
  pages = {21--87},
  author = {Yule, G Udny},
  publisher = {{The Royal Society}}
}

@article{simon1955class,
  title = {On a Class of Skew Distribution Functions},
  volume = {42},
  issue = {3/4},
  journaltitle = {Biometrika},
  date = {1955},
  pages = {425--440},
  author = {Simon, Herbert A},
  publisher = {{JSTOR}}
}

@article{balci_validation_1994-2,
  title = {Validation, Verification, and Testing Techniques throughout the Life Cycle of a Simulation Study},
  volume = {53},
  number = {1},
  journaltitle = {Annals of operations research},
  date = {1994},
  pages = {121--173},
  author = {Balci, Osman},
  file = {/home/robin/Dropbox/Biblio/Balci_1994_Validation,_verification,_and_testing_techniques_throughout_the_life_cycle_of_a.pdf}
}

@article{taillandier_modelisation_2015,
  langid = {french},
  title = {La modélisation du temps dans la simulation à base d’agents},
  volume = {79},
  issn = {0020-0093},
  url = {https://www.cairn.info/revue-l-information-geographique-2015-2-page-65.htm},
  doi = {10.3917/lig.792.0065},
  abstract = {Ces dernières années ont vu la multiplication des modèles informatiques, en particulier des modèles à base d’agents, permettant de simuler dans le temps l’évolution d’un système et ainsi de créer des micro-mondes expérimentables. Les ordinateurs actuels étant par nature discrets (traitement séquentiel d’instructions), le temps ne peut être représenté de façon continue dans ces simulations. Il existe aujourd’hui deux grandes approches de représentation du temps~: la simulation à temps discret et la simulation à événements discrets. Dans la première approche, le temps est découpé en tranches égales (pas de simulation)~: l’état du monde simulé est modifié à chaque pas de simulation. Dans la seconde approche, les tranches ne sont plus égales mais calculées par rapport à chaque événement~: dès qu’un événement est activé, l’état du monde est modifié. Cet article présente ces deux approches et décrit leurs avantages et défauts., These last years have seen the multiplication of computer models, in particular agent-based models, allowing to simulate the evolution of a complex system and thus to create experimentable micro-worlds. The actual computers being discrete by nature (sequential processing of instructions), the time can not be represented in a continuous way in these simulations. Nowadays, two main approaches are used to represent the time~: the discrete-time simulation and the discrete-event simulation. In the first approach, the time is split in constant intervals (simulation step)~: the state of the world is modified at each simulation step. In the second approach, the intervals are not anymore constant, but computed from each event~: as soon as an event is activated, the state of the world is modified. This article presents these approaches and describes their strengths and drawbacks.},
  number = {2},
  journaltitle = {L'Information géographique},
  urldate = {2018-02-27},
  date = {2015-06-23},
  pages = {65--78},
  keywords = {modélisation du temps,simulation à base d’agents,simulation à événement discret,simulation à temps discret},
  author = {Taillandier, Patrick},
  file = {/home/robin/Dropbox/Biblio/Taillandier_2015_La_modélisation_du_temps_dans_la_simulation_à_base_d’agents.pdf;/home/robin/Dropbox/Biblio/Taillandier_2015_La_modélisation_du_temps_dans_la_simulation_à_base_d’agents2.pdf;/home/robin/.mozilla/firefox/2czgwusc.default/zotero/storage/JWRZV6WX/revue-l-information-geographique-2015-2-page-65.html}
}


