axis.title.y = element_markdown()
)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(
name = NULL,
values = c(setosa = "#0072B2", virginica = "#009E73", versicolor = "#D55E00"),
labels = c(
setosa = "<i style='color:#0072B2'>I. setosa  &mu; </i>",
virginica = "<i style='color:#009E73'>I. virginica  &mu; </i>",
versicolor = "<i style='color:#D55E00'>I. versicolor  &mu; </i>")
) +
labs(
title = "**Fisher's *Iris* dataset  (test unicode symbol: &mu;)**
<span style='font-size:11'>Sepal width vs. sepal length for three *Iris*
species  &mu; </span>",
x = "Sepal length (cm)\n (test unicode symbol: &mu;)",
y = "Sepal width (cm)\n (test unicode symbol: &mu;)"
) +
theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11),
# axis.title.x = element_markdown(),
# axis.title.y = element_markdown()
)
library(ggplot2)
library(ggtext)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(
name = NULL,
values = c(setosa = "#0072B2", virginica = "#009E73", versicolor = "#D55E00"),
labels = c(
setosa = "<i style='color:#0072B2'>I. setosa  &mu; </i>",
virginica = "<i style='color:#009E73'>I. virginica  &mu; </i>",
versicolor = "<i style='color:#D55E00'>I. versicolor  &mu; </i>")
) +
labs(
title = "**Fisher's *Iris* dataset  (test unicode symbol: &mu;)**
<span style='font-size:11'>Sepal width vs. sepal length for three *Iris*
species  &mu; </span>",
x = "Sepal length (cm)\n (test unicode symbol: &mu;)",
y = "Sepal width (cm)\n (test unicode symbol: &mu;)"
) +
theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11),
axis.title.x = element_markdown(hjust = 0.5),
axis.title.y = element_markdown(vjust = 0.5)
)
library(ggplot2)
library(ggtext)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(
name = NULL,
values = c(setosa = "#0072B2", virginica = "#009E73", versicolor = "#D55E00"),
labels = c(
setosa = "<i style='color:#0072B2'>I. setosa  &mu; </i>",
virginica = "<i style='color:#009E73'>I. virginica  &mu; </i>",
versicolor = "<i style='color:#D55E00'>I. versicolor  &mu; </i>")
) +
labs(
title = "**Fisher's *Iris* dataset  (test unicode symbol: &mu;)**
<span style='font-size:11'>Sepal width vs. sepal length for three *Iris*
species  &mu; </span>",
x = "Sepal length (cm)<br>(test unicode symbol: &mu;)",
y = "Sepal width (cm)\n (test unicode symbol: &mu;)"
) +
theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11),
axis.title.x = element_markdown(hjust = 0.5),
axis.title.y = element_markdown(vjust = 0.5)
)
library(ggplot2)
library(ggtext)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(
name = NULL,
values = c(setosa = "#0072B2", virginica = "#009E73", versicolor = "#D55E00"),
labels = c(
setosa = "<i style='color:#0072B2'>I. setosa  &mu; </i>",
virginica = "<i style='color:#009E73'>I. virginica  &mu; </i>",
versicolor = "<i style='color:#D55E00'>I. versicolor  &mu; </i>")
) +
labs(
title = "**Fisher's *Iris* dataset  (test unicode symbol: &mu;)**
<span style='font-size:11'>Sepal width vs. sepal length for three *Iris*
species  &mu; </span>",
x = "Sepal length (cm)<br>(test unicode symbol: &mu;)",
y = "Sepal width (cm)<br> (test unicode symbol: &mu;)"
) +
theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11),
axis.title.x = element_markdown(hjust = 0.5),
axis.title.y = element_markdown(vjust = 0.5)
)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(
name = NULL,
values = c(setosa = "#0072B2", virginica = "#009E73", versicolor = "#D55E00"),
labels = c(
setosa = "<i style='color:#0072B2'>I. setosa  &mu; </i>",
virginica = "<i style='color:#009E73'>I. virginica  &mu; </i>",
versicolor = "<i style='color:#D55E00'>I. versicolor  &mu; </i>")
) +
labs(
title = "**Fisher's *Iris* dataset  (test unicode symbol: &mu;)**
<span style='font-size:11'>Sepal width vs. sepal length for three *Iris*
species  &mu; </span>",
x = "Sepal length (cm)<br>(test unicode symbol: &mu;)",
y = "Sepal width (cm)<br> (test unicode symbol: &mu;)"
) +
theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11),
axis.title = element_markdown()
)
shiny::runApp('Dropbox/98_Code_Vrac/reactiveList.R')
runApp('Dropbox/98_Code_Vrac/reactiveList')
library(shiny)
library(tidyverse)
library(tidyverse)
mtcars
runApp('Dropbox/98_Code_Vrac/reactiveList')
runApp('Dropbox/98_Code_Vrac/reactiveList')
library(shiny)
library(tidyverse)
ui <- fluidPage(
sliderInput("slider", label = "ABC", value = 1, min = 1, max = 10),
plotOutput("plot")
)
server <- function(input, output) {
blob <- reactiveValues(a = NULL, b = NULL)
observe({
req(input$slider)
blob$a <- mtcars %>% sample_n(input$slider)
blob$b <- mtcars %>% sample_n(input$slider)
})
plot_data <- reactive({
bind_rows(blob$a, blob$b)
})
output$plot <- renderPlot({
ggplot(plot_data()) + aes(mpg, hp) + geom_point()
})
}
shinyApp(ui = ui, server = server)
mtcars
runApp('Dropbox/98_Code_Vrac/reactiveList')
runApp('Dropbox/98_Code_Vrac/ttz')
1+1
library(shiny)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
packageVersion(("shiny"))
packageVersion(("shiny"))
shiny::runApp('Dropbox/98_Code_Vrac/ttz')
shiny::runApp('Dropbox/98_Code_Vrac/ttz')
shiny::runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
shiny::runApp('Dropbox/98_Code_Vrac/ttz')
shiny::runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
servr::httd()
install.packages(('servr'))
servr::httd()
httd()
library(servr)
httd()
servr::daemon_stop(1)
ervr::daemon_stop(2)
servr::daemon_stop(2)
library(servr)
httd()
servr::daemon_stop(3)
?httd
httd()
servr::daemon_stop(4)
servr::daemon_list()
servr::browse_last()
httd()
daemon_stop(5)
shiny::runApp(host = '0.0.0.0')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server, options = list(host = "0.0.0.0"))
shiny::runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
install.packages(('arrow'))
runApp('Dropbox/98_Code_Vrac/ttz')
runApp('~/Dropbox/98_Code_Vrac/reactiveList')
runApp('Dropbox/98_Code_Vrac/reactiveList')
library(dbplyr)
library(DBI)
install.packages(('RSQLite'))
runApp('Dropbox/98_Code_Vrac/reactiveList')
mtcars
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = ":memory:")
copy_to(con, mtcars, "mtcars",
temporary = FALSE
)
mtcars_db <- tbl(con, "mtcars")
mtcars_db
mtcars_db %>% sample_n(3)
mtcars_db %>% head(input$slider,n = input$slider)
mtcars_db %>% head(n = 3)
runApp('Dropbox/98_Code_Vrac/reactiveList')
runApp('Dropbox/98_Code_Vrac/reactiveList')
mtcars_db %>% sample(size = 3)
mtcars_db %>% sample(size = 3, replace = TRUE)
runApp('Dropbox/98_Code_Vrac/reactiveList')
mtcars_db %>% head(n = 0.5 * input$slider)
mtcars_db %>% head(n = 0.5 * input$slider)
mtcars_db %>% head(n = 0.5 * 3)
mtcars_db %>% head(n = 0.5 * 3)
mtcars_db %>% head(n = 2 * 3)
mtcars_db %>% head(n = 2 * 3) %>% collect()
runApp('Dropbox/98_Code_Vrac/reactiveList')
runApp('Dropbox/98_Code_Vrac/reactiveList')
reactiveList
reactiveList[["c"]]
reactiveList[["a"]]
reactiveList[["b"]]
reactiveList[["c"]]
reactiveList$a
reactiveList$b
reactiveList$c
reactiveList["a"]
reactiveList[,"a"]
reactiveList$a
?options
setwd("~/Dropbox/1_These/0_Manuscrit/chap6/src/AnalyseSensibilite/2_analysis")
library(tidyverse)
results_base <- tribble(
~Indicateur, ~Objectif, ~Moyenne, ~Mediane, ~Q1, ~Q3, ~StDev,
"nb_agregats", 200, 249, 248, 244, 253, 10.45,
"nb_grands_chateaux", 10, 15, 15, 13, 17, 2.87,
"nb_eglises_paroissiales", 300, 348, 348, 338, 359, 12.96,
"distance_eglises_paroissiales", 3000, 1459, 1456, 1391, 1537, 97,
"prop_fp_isoles", 0.2, 0.3, 0.3, 0.3, 0.3, 0.008,
"ratio_charge_fiscale", 3, 2.4, 2.4, 2.4, 2.5, 0.03
) %>%
mutate(CV = StDev/Moyenne) %>%
print(.)
results_base %>%
bind_rows(results_base %>% summarise_all(~mean(.)) %>%
mutate(Indicateur = "Moyenne",
StDev = NULL, Moyenne = NULL)) %>%
select(Indicateur, Moyenne, StDev, CV) %>%
kableExtra::kable("latex") %>%
pack_rows("Moyenne",7,6,latex_gap_space ="2em")
valeurs_base <- read_csv("../1_data/analyse_sensibilite_contexte.csv") %>%
mutate(type = "contexte") %>%
bind_rows(
read_csv("../1_data/analyse_sensibilite_contexte_fix.csv") %>%
mutate(sensibility_value = as.character(sensibility_value )) %>%
mutate(type = "contexte")
) %>%
bind_rows(
read_csv("../1_data/analyse_sensibilite_inputs.csv") %>%
mutate(sensibility_value = as.character(sensibility_value )) %>%
mutate(type = "input")
) %>%
bind_rows(
read_csv("../1_data/analyse_sensibilite_technique.csv") %>%
mutate(sensibility_value = as.character(sensibility_value )) %>%
mutate(type = "technique")
) %>%
bind_rows(
read_csv("../1_data/analyse_sensibilite_mecanisme1.csv") %>%
mutate(sensibility_value = as.character(sensibility_value )) %>%
mutate(type = "mecanismes")
) %>%
filter(!(sensibility_parameter == "distance_detection_agregat" & sensibility_value == "500")) %>% ## Ces valeurs ont buggé
bind_rows(
read_csv("../1_data/analyse_sensibilite_mecanisme1_fix.csv") %>% ## pour distance_detection_agregat, ré-execution à 300 au lieu de 500
mutate(sensibility_value = as.character(sensibility_value )) %>%
mutate(type = "mecanismes")
) %>%
bind_rows(
read_csv("../1_data/analyse_sensibilite_mecanisme2.csv") %>% ## pour distance_detection_agregat, ré-execution à 300 au lieu de 500
mutate(sensibility_value = as.character(sensibility_value )) %>%
mutate(type = "mecanismes")
) %>%
select(-c(seed_sensib, sim_name, annee_sensib, nb_fp, nb_chateaux, nb_eglises, distance_eglises_sensib)) %>%
rename(distance_eglises_paroissiales = distance_eglises_paroissiales_sensib,
prop_fp_isoles = prop_fp_isoles_sensib,
ratio_charge_fiscale = ratio_charge_fiscale_sensib)
valeurs_reduites <- valeurs_base %>%
mutate(
nb_agregats_normalise = nb_agregats / 10.45,
nb_grands_chateaux_normalise = nb_grands_chateaux / 2.87,
nb_eglises_paroissiales_normalise = nb_eglises_paroissiales / 12.96,
distance_eglises_paroissiales_normalise = distance_eglises_paroissiales / 97,
prop_fp_isoles_normalise = prop_fp_isoles / 0.008,
ratio_charge_fiscale_normalise = ratio_charge_fiscale / 0.05
)  %>%
select_at(vars(ends_with("_normalise"), starts_with("sensibility"), "type"))
randomness <- valeurs_reduites %>%
gather(Indicateur, valeur, -sensibility_parameter, -sensibility_value, -type) %>%
mutate(Indicateur = str_remove(Indicateur, "_normalise")) %>%
mutate(valeur = as.numeric(valeur)) %>%
group_by(sensibility_parameter, sensibility_value, Indicateur) %>%
summarise(ecartype = sd(valeur, na.rm = TRUE)) %>%
ungroup() %>%
mutate(sensibility_parameter = str_replace_all(sensibility_parameter, "_", " ")) %>%
mutate(indicateur_ordre = case_when(
Indicateur == "nb_agregats" ~ 1,
Indicateur == "nb_grands_chateaux" ~ 2,
Indicateur == "nb_eglises_paroissiales" ~ 3,
Indicateur == "distance_eglises_paroissiales" ~ 4,
Indicateur == "prop_fp_isoles" ~ 5,
Indicateur == "ratio_charge_fiscale" ~ 6,
)) %>%
mutate(Indicateur = fct_recode(as.factor(Indicateur),
"Nombre\nd'agrégats" = "nb_agregats",
"Nombre de\ngrands\nchâteaux" = 'nb_grands_chateaux',
"Nombre\nd'églises\nparoissiales" = "nb_eglises_paroissiales",
"Distance\nentre\néglises" = "distance_eglises_paroissiales",
"Taux de\nfoyers paysans\nisolés" = "prop_fp_isoles",
"Augmentation\nde la charge\nfiscale" = "ratio_charge_fiscale"
))  %>%
mutate(Indicateur = fct_reorder(Indicateur, indicateur_ordre)) %>%
select(-indicateur_ordre)
alea_new <- randomness %>%
filter(
(Indicateur == "Nombre\nd'agrégats" & (ecartype > 1.5 | ecartype < 0.5)) |
(Indicateur == "Nombre de\ngrands\nchâteaux" & ecartype > 2) |
(Indicateur == "Nombre\nd'églises\nparoissiales" & ecartype > 1.8) |
(Indicateur == "Distance\nentre\néglises" & ecartype > 1.6) |
(Indicateur == "Taux de\nfoyers paysans\nisolés" & ecartype < 0.5) |
(Indicateur == "Augmentation\nde la charge\nfiscale" & ecartype > 1.5)
) %>%
mutate(sensibility_parameter = fct_reorder(sensibility_parameter, ecartype, .desc = FALSE)) %>%
ggplot() +
aes(sensibility_value, ecartype, fill = Indicateur) +
geom_col(width = .5, position = position_dodge()) +
facet_grid(Indicateur~sensibility_parameter, scales = "free_x",labeller = labeller(
.rows = label_wrap_gen(width = 15),
.cols = label_wrap_gen(width = 8))
)+
scale_fill_viridis_d() +
labs(title = "Valeurs de paramètres présentant une variabilité à l'aléa atypique",
x = "Valeurs de paramètres",
y = "Rapport à la variabilité de référence (écart-type)") +
guides(fill = FALSE) +
theme_light() +
theme(axis.text.x = element_text(angle = 45, size = 8, vjust = 1, hjust = 1),
axis.title.x = element_text(margin = margin(t = -16, unit = "pt")),
strip.text.y = element_text(margin = margin(l = 2, r = 2, unit = "pt")),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank()
)
alea_new <- randomness %>%
filter(
(Indicateur == "Nombre\nd'agrégats" & (ecartype > 1.5 | ecartype < 0.5)) |
(Indicateur == "Nombre de\ngrands\nchâteaux" & ecartype > 2) |
(Indicateur == "Nombre\nd'églises\nparoissiales" & ecartype > 1.8) |
(Indicateur == "Distance\nentre\néglises" & ecartype > 1.6) |
(Indicateur == "Taux de\nfoyers paysans\nisolés" & ecartype < 0.5) |
(Indicateur == "Augmentation\nde la charge\nfiscale" & ecartype > 1.5)
) %>%
mutate(sensibility_parameter = fct_reorder(sensibility_parameter, ecartype, .desc = FALSE)) %>%
ggplot() +
aes(sensibility_value, ecartype, fill = Indicateur) +
geom_col(width = .5, position = position_dodge()) +
facet_grid(Indicateur~sensibility_parameter, scales = "free_x",labeller = labeller(
.rows = label_wrap_gen(width = 15),
.cols = label_wrap_gen(width = 8))
)+
scale_fill_viridis_d() +
labs(title = "Valeurs de paramètres présentant une variabilité à l'aléa atypique",
x = "Valeurs de paramètres",
y = "Rapport à la variabilité de référence (écart-type)") +
guides(fill = FALSE) +
theme_light() +
theme(axis.text.x = element_text(angle = 45, size = 8, vjust = 1, hjust = 1),
axis.title.x = element_text(margin = margin(t = -16, unit = "pt")),
strip.text.y = element_text(margin = margin(l = 2, r = 2, unit = "pt")),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank()
)
ggsave(alea_new, filename = "../3_results/sensibilite_alea_outliers.pdf", width = 20, height = 15, units = "cm", scale = 1.35)
ggsave(alea_new, filename = "../3_results/sensibilite_alea_outliers.pdf", device = "CairoPDF",width = 20, height = 15, units = "cm", scale = 1.35)
library(Cairo)
ggsave(alea_new, filename = "../3_results/sensibilite_alea_outliers.pdf", device = "CairoPDF",width = 20, height = 15, units = "cm", scale = 1.35)
ggsave(alea_new, filename = "../3_results/sensibilite_alea_outliers.pdf", device = "cairo_pdf",width = 20, height = 15, units = "cm", scale = 1.35)
ggsave(alea_new, filename = "../3_results/sensibilite_alea_outliers.pdf", device = CairoPDF ,width = 20, height = 15, units = "cm", scale = 1.35)
ggsave(alea_new, filename = "../3_results/sensibilite_alea_outliers.pdf", device = CairoPDF() ,width = 20, height = 15, units = "cm", scale = 1.35)
ggsave(alea_new, filename = "../3_results/sensibilite_alea_outliers.pdf",width = 20, height = 15, units = "cm", scale = 1.35)
extrafont::embed_fonts("../3_results/sensibilite_alea_outliers.pdf")
alea_new <- randomness %>%
filter(
(Indicateur == "Nombre\nd'agrégats" & (ecartype > 1.5 | ecartype < 0.5)) |
(Indicateur == "Nombre de\ngrands\nchâteaux" & ecartype > 2) |
(Indicateur == "Nombre\nd'églises\nparoissiales" & ecartype > 1.8) |
(Indicateur == "Distance\nentre\néglises" & ecartype > 1.6) |
(Indicateur == "Taux de\nfoyers paysans\nisolés" & ecartype < 0.5) |
(Indicateur == "Augmentation\nde la charge\nfiscale" & ecartype > 1.5)
) %>%
mutate(sensibility_parameter = fct_reorder(sensibility_parameter, ecartype, .desc = FALSE)) %>%
ggplot() +
aes(sensibility_value, ecartype, fill = Indicateur) +
geom_col(width = .5, position = position_dodge()) +
facet_grid(Indicateur~sensibility_parameter, scales = "free_x",labeller = labeller(
.rows = label_wrap_gen(width = 15),
.cols = label_wrap_gen(width = 8))
)+
scale_fill_viridis_d() +
labs(title = "Valeurs de paramètres présentant une variabilité à l'aléa atypique",
x = "Valeurs de paramètres",
y = "Rapport à la variabilité de référence (écart-type)") +
guides(fill = FALSE) +
theme_light() +
theme(axis.text.x = element_text(angle = 45, size = 8, vjust = 1, hjust = 1),
axis.title.x = element_text(margin = margin(t = -16, unit = "pt")),
strip.text.y = element_text(margin = margin(l = 2, r = 2, unit = "pt")),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank()
)
ggsave(alea_new, filename = "../3_results/sensibilite_alea_outliers.pdf",width = 20, height = 15, units = "cm", scale = 1.35)
