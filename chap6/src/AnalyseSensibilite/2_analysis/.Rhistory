theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11)
)
library(ggplot2)
library(ggtext)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(
name = NULL,
values = c(setosa = "#0072B2", virginica = "#009E73", versicolor = "#D55E00"),
labels = c(
setosa = "<i style='color:#0072B2'>I. setosa  &mu; </i>",
virginica = "<i style='color:#009E73'>I. virginica  &mu; </i>",
versicolor = "<i style='color:#D55E00'>I. versicolor  &mu; </i>")
) +
labs(
title = "**Fisher's *Iris* dataset  (test unicode symbol: &mu;)**
<span style='font-size:11'>Sepal width vs. sepal length for three *Iris*
species  &mu; </span>",
x = "Sepal length (cm)\n (test unicode symbol: &mu;)",
y = "Sepal width (cm)\n (test unicode symbol: &mu;)"
) +
theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11)
)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(
name = NULL,
values = c(setosa = "#0072B2", virginica = "#009E73", versicolor = "#D55E00"),
labels = c(
setosa = "<i style='color:#0072B2'>I. setosa  &mu; </i>",
virginica = "<i style='color:#009E73'>I. virginica  &mu; </i>",
versicolor = "<i style='color:#D55E00'>I. versicolor  &mu; </i>")
) +
labs(
title = "**Fisher's *Iris* dataset  (test unicode symbol: &mu;)**
<span style='font-size:11'>Sepal width vs. sepal length for three *Iris*
species  &mu; </span>",
x = "Sepal length (cm)\n (test unicode symbol: &mu;)",
y = "Sepal width (cm)\n (test unicode symbol: &mu;)"
) +
theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11),
axis.title.x = element_markdown(),
axis.title.y = element_markdown()
)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(
name = NULL,
values = c(setosa = "#0072B2", virginica = "#009E73", versicolor = "#D55E00"),
labels = c(
setosa = "<i style='color:#0072B2'>I. setosa  &mu; </i>",
virginica = "<i style='color:#009E73'>I. virginica  &mu; </i>",
versicolor = "<i style='color:#D55E00'>I. versicolor  &mu; </i>")
) +
labs(
title = "**Fisher's *Iris* dataset  (test unicode symbol: &mu;)**
<span style='font-size:11'>Sepal width vs. sepal length for three *Iris*
species  &mu; </span>",
x = "Sepal length (cm)\n (test unicode symbol: &mu;)",
y = "Sepal width (cm)\n (test unicode symbol: &mu;)"
) +
theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11),
# axis.title.x = element_markdown(),
# axis.title.y = element_markdown()
)
library(ggplot2)
library(ggtext)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(
name = NULL,
values = c(setosa = "#0072B2", virginica = "#009E73", versicolor = "#D55E00"),
labels = c(
setosa = "<i style='color:#0072B2'>I. setosa  &mu; </i>",
virginica = "<i style='color:#009E73'>I. virginica  &mu; </i>",
versicolor = "<i style='color:#D55E00'>I. versicolor  &mu; </i>")
) +
labs(
title = "**Fisher's *Iris* dataset  (test unicode symbol: &mu;)**
<span style='font-size:11'>Sepal width vs. sepal length for three *Iris*
species  &mu; </span>",
x = "Sepal length (cm)\n (test unicode symbol: &mu;)",
y = "Sepal width (cm)\n (test unicode symbol: &mu;)"
) +
theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11),
axis.title.x = element_markdown(hjust = 0.5),
axis.title.y = element_markdown(vjust = 0.5)
)
library(ggplot2)
library(ggtext)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(
name = NULL,
values = c(setosa = "#0072B2", virginica = "#009E73", versicolor = "#D55E00"),
labels = c(
setosa = "<i style='color:#0072B2'>I. setosa  &mu; </i>",
virginica = "<i style='color:#009E73'>I. virginica  &mu; </i>",
versicolor = "<i style='color:#D55E00'>I. versicolor  &mu; </i>")
) +
labs(
title = "**Fisher's *Iris* dataset  (test unicode symbol: &mu;)**
<span style='font-size:11'>Sepal width vs. sepal length for three *Iris*
species  &mu; </span>",
x = "Sepal length (cm)<br>(test unicode symbol: &mu;)",
y = "Sepal width (cm)\n (test unicode symbol: &mu;)"
) +
theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11),
axis.title.x = element_markdown(hjust = 0.5),
axis.title.y = element_markdown(vjust = 0.5)
)
library(ggplot2)
library(ggtext)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(
name = NULL,
values = c(setosa = "#0072B2", virginica = "#009E73", versicolor = "#D55E00"),
labels = c(
setosa = "<i style='color:#0072B2'>I. setosa  &mu; </i>",
virginica = "<i style='color:#009E73'>I. virginica  &mu; </i>",
versicolor = "<i style='color:#D55E00'>I. versicolor  &mu; </i>")
) +
labs(
title = "**Fisher's *Iris* dataset  (test unicode symbol: &mu;)**
<span style='font-size:11'>Sepal width vs. sepal length for three *Iris*
species  &mu; </span>",
x = "Sepal length (cm)<br>(test unicode symbol: &mu;)",
y = "Sepal width (cm)<br> (test unicode symbol: &mu;)"
) +
theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11),
axis.title.x = element_markdown(hjust = 0.5),
axis.title.y = element_markdown(vjust = 0.5)
)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(
name = NULL,
values = c(setosa = "#0072B2", virginica = "#009E73", versicolor = "#D55E00"),
labels = c(
setosa = "<i style='color:#0072B2'>I. setosa  &mu; </i>",
virginica = "<i style='color:#009E73'>I. virginica  &mu; </i>",
versicolor = "<i style='color:#D55E00'>I. versicolor  &mu; </i>")
) +
labs(
title = "**Fisher's *Iris* dataset  (test unicode symbol: &mu;)**
<span style='font-size:11'>Sepal width vs. sepal length for three *Iris*
species  &mu; </span>",
x = "Sepal length (cm)<br>(test unicode symbol: &mu;)",
y = "Sepal width (cm)<br> (test unicode symbol: &mu;)"
) +
theme_minimal() +
theme(
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 11),
axis.title = element_markdown()
)
shiny::runApp('Dropbox/98_Code_Vrac/reactiveList.R')
runApp('Dropbox/98_Code_Vrac/reactiveList')
library(shiny)
library(tidyverse)
library(tidyverse)
mtcars
runApp('Dropbox/98_Code_Vrac/reactiveList')
runApp('Dropbox/98_Code_Vrac/reactiveList')
library(shiny)
library(tidyverse)
ui <- fluidPage(
sliderInput("slider", label = "ABC", value = 1, min = 1, max = 10),
plotOutput("plot")
)
server <- function(input, output) {
blob <- reactiveValues(a = NULL, b = NULL)
observe({
req(input$slider)
blob$a <- mtcars %>% sample_n(input$slider)
blob$b <- mtcars %>% sample_n(input$slider)
})
plot_data <- reactive({
bind_rows(blob$a, blob$b)
})
output$plot <- renderPlot({
ggplot(plot_data()) + aes(mpg, hp) + geom_point()
})
}
shinyApp(ui = ui, server = server)
mtcars
runApp('Dropbox/98_Code_Vrac/reactiveList')
runApp('Dropbox/98_Code_Vrac/ttz')
1+1
library(shiny)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
packageVersion(("shiny"))
packageVersion(("shiny"))
shiny::runApp('Dropbox/98_Code_Vrac/ttz')
shiny::runApp('Dropbox/98_Code_Vrac/ttz')
shiny::runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
shiny::runApp('Dropbox/98_Code_Vrac/ttz')
shiny::runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
servr::httd()
install.packages(('servr'))
servr::httd()
httd()
library(servr)
httd()
servr::daemon_stop(1)
ervr::daemon_stop(2)
servr::daemon_stop(2)
library(servr)
httd()
servr::daemon_stop(3)
?httd
httd()
servr::daemon_stop(4)
servr::daemon_list()
servr::browse_last()
httd()
daemon_stop(5)
shiny::runApp(host = '0.0.0.0')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server, options = list(host = "0.0.0.0"))
shiny::runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
runApp('Dropbox/98_Code_Vrac/ttz')
install.packages(('arrow'))
runApp('Dropbox/98_Code_Vrac/ttz')
runApp('~/Dropbox/98_Code_Vrac/reactiveList')
runApp('Dropbox/98_Code_Vrac/reactiveList')
library(dbplyr)
library(DBI)
install.packages(('RSQLite'))
runApp('Dropbox/98_Code_Vrac/reactiveList')
mtcars
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = ":memory:")
copy_to(con, mtcars, "mtcars",
temporary = FALSE
)
mtcars_db <- tbl(con, "mtcars")
mtcars_db
mtcars_db %>% sample_n(3)
mtcars_db %>% head(input$slider,n = input$slider)
mtcars_db %>% head(n = 3)
runApp('Dropbox/98_Code_Vrac/reactiveList')
runApp('Dropbox/98_Code_Vrac/reactiveList')
mtcars_db %>% sample(size = 3)
mtcars_db %>% sample(size = 3, replace = TRUE)
runApp('Dropbox/98_Code_Vrac/reactiveList')
mtcars_db %>% head(n = 0.5 * input$slider)
mtcars_db %>% head(n = 0.5 * input$slider)
mtcars_db %>% head(n = 0.5 * 3)
mtcars_db %>% head(n = 0.5 * 3)
mtcars_db %>% head(n = 2 * 3)
mtcars_db %>% head(n = 2 * 3) %>% collect()
runApp('Dropbox/98_Code_Vrac/reactiveList')
runApp('Dropbox/98_Code_Vrac/reactiveList')
reactiveList
reactiveList[["c"]]
reactiveList[["a"]]
reactiveList[["b"]]
reactiveList[["c"]]
reactiveList$a
reactiveList$b
reactiveList$c
reactiveList["a"]
reactiveList[,"a"]
reactiveList$a
?options
setwd("~/Dropbox/1_These/0_Manuscrit/chap6/src/AnalyseSensibilite/2_analysis")
library(tidyverse)
valeurs_base <- read_csv("../1_data/analyse_sensibilite_contexte.csv") %>%
mutate(type = "contexte") %>%
bind_rows(
read_csv("../1_data/analyse_sensibilite_contexte_fix.csv") %>%
mutate(sensibility_value = as.character(sensibility_value )) %>%
mutate(type = "contexte")
) %>%
bind_rows(
read_csv("../1_data/analyse_sensibilite_inputs.csv") %>%
mutate(sensibility_value = as.character(sensibility_value )) %>%
mutate(type = "input")
) %>%
bind_rows(
read_csv("../1_data/analyse_sensibilite_technique.csv") %>%
mutate(sensibility_value = as.character(sensibility_value )) %>%
mutate(type = "technique")
) %>%
bind_rows(
read_csv("../1_data/analyse_sensibilite_mecanisme1.csv") %>%
mutate(sensibility_value = as.character(sensibility_value )) %>%
mutate(type = "mecanismes")
) %>%
filter(!(sensibility_parameter == "distance_detection_agregat" & sensibility_value == "500")) %>% ## Ces valeurs ont buggé
bind_rows(
read_csv("../1_data/analyse_sensibilite_mecanisme1_fix.csv") %>% ## pour distance_detection_agregat, ré-execution à 300 au lieu de 500
mutate(sensibility_value = as.character(sensibility_value )) %>%
mutate(type = "mecanismes")
) %>%
bind_rows(
read_csv("../1_data/analyse_sensibilite_mecanisme2.csv") %>% ## pour distance_detection_agregat, ré-execution à 300 au lieu de 500
mutate(sensibility_value = as.character(sensibility_value )) %>%
mutate(type = "mecanismes")
) %>%
select(-c(seed_sensib, sim_name, annee_sensib, nb_fp, nb_chateaux, nb_eglises, distance_eglises_sensib)) %>%
rename(distance_eglises_paroissiales = distance_eglises_paroissiales_sensib,
prop_fp_isoles = prop_fp_isoles_sensib,
ratio_charge_fiscale = ratio_charge_fiscale_sensib)
valeurs_base %>%
group_by(sensibility_parameter, type) %>%
summarise(n = n(), values = list(unique(sensibility_value))) %>%
mutate(values = paste0(values, collapse = " , "))
valeurs_normalisees <- valeurs_base %>%
mutate(
nb_agregats_normalise = (nb_agregats - 200) / 10.45,
nb_grands_chateaux_normalise = (nb_grands_chateaux - 10) / 2.87,
nb_eglises_paroissiales_normalise = (nb_eglises_paroissiales - 300) / 12.96,
distance_eglises_paroissiales_normalise = (distance_eglises_paroissiales - 3000) / 97,
prop_fp_isoles_normalise = (prop_fp_isoles - 0.2) / 0.08,
ratio_charge_fiscale_normalise = (ratio_charge_fiscale - 3) / 0.03
) %>%
select_at(vars(ends_with("_normalise"), starts_with("sensibility"), "type"))
library(ggalt)
valeurs_normalisees %>%
gather(Indicateur, Valeur_norm, -type, -sensibility_parameter, -sensibility_value) %>%
group_by(sensibility_parameter, type) %>%
summarise(sensibilite = mean(abs(Valeur_norm), na.rm = TRUE)) %>%
arrange(desc(sensibilite)) %>%
mutate(type = factor(type, levels = c("input", "contexte", "mecanismes", "technique"))) %>%
mutate(type = fct_recode(type, Input = "input", Contexte = "contexte", Mécanisme = "mecanismes", Technique = "technique")) %>%
ggplot() +
aes(fct_reorder(sensibility_parameter, sensibilite), sensibilite, colour = type) +
geom_lollipop(point.size=2.5, size = 1.25, horizontal = FALSE) +
geom_label(aes(x = fct_reorder(sensibility_parameter, sensibilite), y = sensibilite, label = sensibility_parameter),
hjust = 0, nudge_y = 0.25, colour = "grey20", size = 3,
label.size = NA) +
scale_y_continuous(breaks = seq(0, 12, 2), minor_breaks = seq(1, 11, 2), limits = c(0, 14.25), expand = c(0, 0)) +
coord_flip() +
labs(
title = "Sensibilité moyenne des paramètres",
subtitle = "Sensibilité : moyenne des valeurs absolues des valeurs normalisées",
x = "Paramètres",
y = "Sensibilité"
) +
scale_colour_viridis_d() +
theme_light() +
theme(legend.position="bottom") +
guides(colour = guide_legend(title = "Type de paramètre",
override.aes = list(size=6),
title.position = "top",
title.hjust = .5,
label.position = "bottom")) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.border = element_blank()) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())
main_params <- valeurs_normalisees %>%
gather(Indicateur, Valeur_norm, -type, -sensibility_parameter, -sensibility_value) %>%
group_by(sensibility_parameter, type) %>%
summarise(sensibilite = mean(abs(Valeur_norm), na.rm = TRUE)) %>%
ungroup() %>%
top_n(10, wt = sensibilite) %>%
select(sensibility_parameter)
params_to_keep <- valeurs_normalisees %>%
select(-sensibility_value) %>%
gather(Indicateur, Valeur_norm, -type, -sensibility_parameter) %>%
group_by(sensibility_parameter, type, Indicateur) %>%
summarise(sensibilite = mean(abs(Valeur_norm), na.rm = TRUE)) %>%
arrange(desc(sensibilite)) %>%
group_by(Indicateur) %>%
mutate(rang = dplyr::dense_rank(desc(sensibilite))) %>%
ungroup() %>%
filter(rang <= 3) %>%
group_by(sensibility_parameter) %>%
summarise(n = n(), indicateurs = list(Indicateur)) %>%
mutate(indicateurs = map_chr(indicateurs, ~paste(.x, collapse = ", "))) %>%
arrange(desc(n), indicateurs) %>% # stop ici pour tableau
select(-n) %>%
mutate(type_selection = "Locale") %>%
full_join(main_params %>% mutate(indicateurs = NA, type_selection = "Globale"), by = "sensibility_parameter") %>%
select(sensibility_parameter) %>%
distinct(sensibility_parameter) %>%
pull()
valeurs_normalisees %>%
select(-sensibility_value) %>%
gather(Indicateur, Valeur_norm, -type, -sensibility_parameter) %>%
group_by(sensibility_parameter, type, Indicateur) %>%
summarise(sensibilite = mean(abs(Valeur_norm), na.rm = TRUE)) %>%
arrange(desc(sensibilite)) %>%
group_by(Indicateur) %>%
mutate(rang = dplyr::dense_rank(desc(sensibilite))) %>%
ungroup() %>%
filter(rang <= 3) %>%
group_by(sensibility_parameter) %>%
summarise(n = n(), indicateurs = list(Indicateur)) %>%
mutate(indicateurs = map_chr(indicateurs, ~paste(.x, collapse = "\n"))) %>%
arrange(desc(n), indicateurs) %>% # stop ici pour tableau
select(-n) %>%
mutate(type_selection = "Locale") %>%
full_join(main_params %>% mutate(type_selection = "Globale"), by = "sensibility_parameter") %>%
mutate(type_selection = if_else(!is.na(type_selection.y), type_selection.y, indicateurs)) %>%
select(-indicateurs, -type_selection.x, -type_selection.y) %>%
rename(`Paramètre` = sensibility_parameter,
`Origine de la sélection` = type_selection) %>%
{print(.) ; .} %>%
kableExtra::kable("latex")
valeurs_base
valeurs_base %>% filter(sensibility_parameter == "rayon_migration_locale_fp")
valeurs_base %>% filter(sensibility_parameter == "rayon_migration_locale_fp") %>% group_by(sensibility_value, sensibility_parameter, type) %>% summarise_all(~mean(., na.rm = TRUE)
)
